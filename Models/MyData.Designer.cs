#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Website_Course_AVG.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "AVG_Website_Course")]
    public partial class MyDataDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void Insertaccount(account instance);
        partial void Updateaccount(account instance);
        partial void Deleteaccount(account instance);
        partial void Insertuser(user instance);
        partial void Updateuser(user instance);
        partial void Deleteuser(user instance);
        partial void Insertblog(blog instance);
        partial void Updateblog(blog instance);
        partial void Deleteblog(blog instance);
        partial void Insertcategory(category instance);
        partial void Updatecategory(category instance);
        partial void Deletecategory(category instance);
        partial void Insertcomment(comment instance);
        partial void Updatecomment(comment instance);
        partial void Deletecomment(comment instance);
        partial void Insertcontact(contact instance);
        partial void Updatecontact(contact instance);
        partial void Deletecontact(contact instance);
        partial void Insertcourse(course instance);
        partial void Updatecourse(course instance);
        partial void Deletecourse(course instance);
        partial void Insertdetail_course(detail_course instance);
        partial void Updatedetail_course(detail_course instance);
        partial void Deletedetail_course(detail_course instance);
        partial void Insertdetail_order(detail_order instance);
        partial void Updatedetail_order(detail_order instance);
        partial void Deletedetail_order(detail_order instance);
        partial void Insertexercise(exercise instance);
        partial void Updateexercise(exercise instance);
        partial void Deleteexercise(exercise instance);
        partial void Insertlesson(lesson instance);
        partial void Updatelesson(lesson instance);
        partial void Deletelesson(lesson instance);
        partial void Insertnote(note instance);
        partial void Updatenote(note instance);
        partial void Deletenote(note instance);
        partial void Insertnotification(notification instance);
        partial void Updatenotification(notification instance);
        partial void Deletenotification(notification instance);
        partial void Insertoption(option instance);
        partial void Updateoption(option instance);
        partial void Deleteoption(option instance);
        partial void Insertorder(order instance);
        partial void Updateorder(order instance);
        partial void Deleteorder(order instance);
        partial void Insertpromotion(promotion instance);
        partial void Updatepromotion(promotion instance);
        partial void Deletepromotion(promotion instance);
        #endregion
        public MyDataDataContext() :
        base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AVG_Website_CourseConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public MyDataDataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public MyDataDataContext(System.Data.IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public MyDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public MyDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<account> accounts
        {
            get
            {
                return this.GetTable<account>();
            }
        }

        public System.Data.Linq.Table<user> users
        {
            get
            {
                return this.GetTable<user>();
            }
        }

        public System.Data.Linq.Table<blog> blogs
        {
            get
            {
                return this.GetTable<blog>();
            }
        }

        public System.Data.Linq.Table<category> categories
        {
            get
            {
                return this.GetTable<category>();
            }
        }

        public System.Data.Linq.Table<comment> comments
        {
            get
            {
                return this.GetTable<comment>();
            }
        }

        public System.Data.Linq.Table<contact> contacts
        {
            get
            {
                return this.GetTable<contact>();
            }
        }

        public System.Data.Linq.Table<course> courses
        {
            get
            {
                return this.GetTable<course>();
            }
        }

        public System.Data.Linq.Table<detail_course> detail_courses
        {
            get
            {
                return this.GetTable<detail_course>();
            }
        }

        public System.Data.Linq.Table<detail_order> detail_orders
        {
            get
            {
                return this.GetTable<detail_order>();
            }
        }

        public System.Data.Linq.Table<exercise> exercises
        {
            get
            {
                return this.GetTable<exercise>();
            }
        }

        public System.Data.Linq.Table<lesson> lessons
        {
            get
            {
                return this.GetTable<lesson>();
            }
        }

        public System.Data.Linq.Table<note> notes
        {
            get
            {
                return this.GetTable<note>();
            }
        }

        public System.Data.Linq.Table<notification> notifications
        {
            get
            {
                return this.GetTable<notification>();
            }
        }

        public System.Data.Linq.Table<option> options
        {
            get
            {
                return this.GetTable<option>();
            }
        }

        public System.Data.Linq.Table<order> orders
        {
            get
            {
                return this.GetTable<order>();
            }
        }

        public System.Data.Linq.Table<promotion> promotions
        {
            get
            {
                return this.GetTable<promotion>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.accounts")]
    public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _username;

        private string _password;

        private string _provide;

        private string _provide_id;

        private string _token;

        private EntitySet<user> _users;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnusernameChanging(string value);
        partial void OnusernameChanged();
        partial void OnpasswordChanging(string value);
        partial void OnpasswordChanged();
        partial void OnprovideChanging(string value);
        partial void OnprovideChanged();
        partial void Onprovide_idChanging(string value);
        partial void Onprovide_idChanged();
        partial void OntokenChanging(string value);
        partial void OntokenChanged();
        #endregion

        public account()
        {
            this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_username", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnusernameChanging(value);
                    this.SendPropertyChanging();
                    this._username = value;
                    this.SendPropertyChanged("username");
                    this.OnusernameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_password", DbType = "VarChar(MAX) NOT NULL", CanBeNull = false)]
        public string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnpasswordChanging(value);
                    this.SendPropertyChanging();
                    this._password = value;
                    this.SendPropertyChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_provide", DbType = "VarChar(50)")]
        public string provide
        {
            get
            {
                return this._provide;
            }
            set
            {
                if ((this._provide != value))
                {
                    this.OnprovideChanging(value);
                    this.SendPropertyChanging();
                    this._provide = value;
                    this.SendPropertyChanged("provide");
                    this.OnprovideChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_provide_id", DbType = "VarChar(MAX)")]
        public string provide_id
        {
            get
            {
                return this._provide_id;
            }
            set
            {
                if ((this._provide_id != value))
                {
                    this.Onprovide_idChanging(value);
                    this.SendPropertyChanging();
                    this._provide_id = value;
                    this.SendPropertyChanged("provide_id");
                    this.Onprovide_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_token", DbType = "VarChar(MAX)")]
        public string token
        {
            get
            {
                return this._token;
            }
            set
            {
                if ((this._token != value))
                {
                    this.OntokenChanging(value);
                    this.SendPropertyChanging();
                    this._token = value;
                    this.SendPropertyChanged("token");
                    this.OntokenChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "account_user", Storage = "_users", ThisKey = "id", OtherKey = "account_id")]
        public EntitySet<user> users
        {
            get
            {
                return this._users;
            }
            set
            {
                this._users.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_users(user entity)
        {
            this.SendPropertyChanging();
            entity.account = this;
        }

        private void detach_users(user entity)
        {
            this.SendPropertyChanging();
            entity.account = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.users")]
    public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _fullname;

        private string _email;

        private System.Nullable<System.DateTime> _birthday;

        private System.Nullable<bool> _gender;

        private System.Nullable<int> _account_id;

        private EntitySet<blog> _blogs;

        private EntitySet<comment> _comments;

        private EntitySet<detail_course> _detail_courses;

        private EntityRef<note> _note;

        private EntitySet<notification> _notifications;

        private EntitySet<order> _orders;

        private EntitySet<promotion> _promotions;

        private EntityRef<account> _account;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnfullnameChanging(string value);
        partial void OnfullnameChanged();
        partial void OnemailChanging(string value);
        partial void OnemailChanged();
        partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
        partial void OnbirthdayChanged();
        partial void OngenderChanging(System.Nullable<bool> value);
        partial void OngenderChanged();
        partial void Onaccount_idChanging(System.Nullable<int> value);
        partial void Onaccount_idChanged();
        #endregion

        public user()
        {
            this._blogs = new EntitySet<blog>(new Action<blog>(this.attach_blogs), new Action<blog>(this.detach_blogs));
            this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
            this._detail_courses = new EntitySet<detail_course>(new Action<detail_course>(this.attach_detail_courses), new Action<detail_course>(this.detach_detail_courses));
            this._note = default(EntityRef<note>);
            this._notifications = new EntitySet<notification>(new Action<notification>(this.attach_notifications), new Action<notification>(this.detach_notifications));
            this._orders = new EntitySet<order>(new Action<order>(this.attach_orders), new Action<order>(this.detach_orders));
            this._promotions = new EntitySet<promotion>(new Action<promotion>(this.attach_promotions), new Action<promotion>(this.detach_promotions));
            this._account = default(EntityRef<account>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_fullname", DbType = "NVarChar(500)")]
        public string fullname
        {
            get
            {
                return this._fullname;
            }
            set
            {
                if ((this._fullname != value))
                {
                    this.OnfullnameChanging(value);
                    this.SendPropertyChanging();
                    this._fullname = value;
                    this.SendPropertyChanged("fullname");
                    this.OnfullnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_email", DbType = "VarChar(200)")]
        public string email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnemailChanging(value);
                    this.SendPropertyChanging();
                    this._email = value;
                    this.SendPropertyChanged("email");
                    this.OnemailChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_birthday", DbType = "Date")]
        public System.Nullable<System.DateTime> birthday
        {
            get
            {
                return this._birthday;
            }
            set
            {
                if ((this._birthday != value))
                {
                    this.OnbirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._birthday = value;
                    this.SendPropertyChanged("birthday");
                    this.OnbirthdayChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_gender", DbType = "Bit")]
        public System.Nullable<bool> gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                if ((this._gender != value))
                {
                    this.OngenderChanging(value);
                    this.SendPropertyChanging();
                    this._gender = value;
                    this.SendPropertyChanged("gender");
                    this.OngenderChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_account_id", DbType = "Int")]
        public System.Nullable<int> account_id
        {
            get
            {
                return this._account_id;
            }
            set
            {
                if ((this._account_id != value))
                {
                    if (this._account.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onaccount_idChanging(value);
                    this.SendPropertyChanging();
                    this._account_id = value;
                    this.SendPropertyChanged("account_id");
                    this.Onaccount_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_blog", Storage = "_blogs", ThisKey = "id", OtherKey = "user_id")]
        public EntitySet<blog> blogs
        {
            get
            {
                return this._blogs;
            }
            set
            {
                this._blogs.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_comment", Storage = "_comments", ThisKey = "id", OtherKey = "user_id")]
        public EntitySet<comment> comments
        {
            get
            {
                return this._comments;
            }
            set
            {
                this._comments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_detail_course", Storage = "_detail_courses", ThisKey = "id", OtherKey = "user_id")]
        public EntitySet<detail_course> detail_courses
        {
            get
            {
                return this._detail_courses;
            }
            set
            {
                this._detail_courses.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_note", Storage = "_note", ThisKey = "id", OtherKey = "id", IsUnique = true, IsForeignKey = false)]
        public note note
        {
            get
            {
                return this._note.Entity;
            }
            set
            {
                note previousValue = this._note.Entity;
                if (((previousValue != value)
                            || (this._note.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._note.Entity = null;
                        previousValue.user = null;
                    }
                    this._note.Entity = value;
                    if ((value != null))
                    {
                        value.user = this;
                    }
                    this.SendPropertyChanged("note");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_notification", Storage = "_notifications", ThisKey = "id", OtherKey = "user_id")]
        public EntitySet<notification> notifications
        {
            get
            {
                return this._notifications;
            }
            set
            {
                this._notifications.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_order", Storage = "_orders", ThisKey = "id", OtherKey = "user_id")]
        public EntitySet<order> orders
        {
            get
            {
                return this._orders;
            }
            set
            {
                this._orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_promotion", Storage = "_promotions", ThisKey = "id", OtherKey = "user_id")]
        public EntitySet<promotion> promotions
        {
            get
            {
                return this._promotions;
            }
            set
            {
                this._promotions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "account_user", Storage = "_account", ThisKey = "account_id", OtherKey = "id", IsForeignKey = true)]
        public account account
        {
            get
            {
                return this._account.Entity;
            }
            set
            {
                account previousValue = this._account.Entity;
                if (((previousValue != value)
                            || (this._account.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._account.Entity = null;
                        previousValue.users.Remove(this);
                    }
                    this._account.Entity = value;
                    if ((value != null))
                    {
                        value.users.Add(this);
                        this._account_id = value.id;
                    }
                    else
                    {
                        this._account_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("account");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_blogs(blog entity)
        {
            this.SendPropertyChanging();
            entity.user = this;
        }

        private void detach_blogs(blog entity)
        {
            this.SendPropertyChanging();
            entity.user = null;
        }

        private void attach_comments(comment entity)
        {
            this.SendPropertyChanging();
            entity.user = this;
        }

        private void detach_comments(comment entity)
        {
            this.SendPropertyChanging();
            entity.user = null;
        }

        private void attach_detail_courses(detail_course entity)
        {
            this.SendPropertyChanging();
            entity.user = this;
        }

        private void detach_detail_courses(detail_course entity)
        {
            this.SendPropertyChanging();
            entity.user = null;
        }

        private void attach_notifications(notification entity)
        {
            this.SendPropertyChanging();
            entity.user = this;
        }

        private void detach_notifications(notification entity)
        {
            this.SendPropertyChanging();
            entity.user = null;
        }

        private void attach_orders(order entity)
        {
            this.SendPropertyChanging();
            entity.user = this;
        }

        private void detach_orders(order entity)
        {
            this.SendPropertyChanging();
            entity.user = null;
        }

        private void attach_promotions(promotion entity)
        {
            this.SendPropertyChanging();
            entity.user = this;
        }

        private void detach_promotions(promotion entity)
        {
            this.SendPropertyChanging();
            entity.user = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.blogs")]
    public partial class blog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _title;

        private string _image;

        private string _content;

        private int _user_id;

        private EntityRef<user> _user;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntitleChanging(string value);
        partial void OntitleChanged();
        partial void OnimageChanging(string value);
        partial void OnimageChanged();
        partial void OncontentChanging(string value);
        partial void OncontentChanged();
        partial void Onuser_idChanging(int value);
        partial void Onuser_idChanged();
        #endregion

        public blog()
        {
            this._user = default(EntityRef<user>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_title", DbType = "NVarChar(50)")]
        public string title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OntitleChanging(value);
                    this.SendPropertyChanging();
                    this._title = value;
                    this.SendPropertyChanged("title");
                    this.OntitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_image", DbType = "NVarChar(MAX)")]
        public string image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    this.OnimageChanging(value);
                    this.SendPropertyChanging();
                    this._image = value;
                    this.SendPropertyChanged("image");
                    this.OnimageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_content", DbType = "NVarChar(MAX)")]
        public string content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OncontentChanging(value);
                    this.SendPropertyChanging();
                    this._content = value;
                    this.SendPropertyChanged("content");
                    this.OncontentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int NOT NULL")]
        public int user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_blog", Storage = "_user", ThisKey = "user_id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.blogs.Remove(this);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.blogs.Add(this);
                        this._user_id = value.id;
                    }
                    else
                    {
                        this._user_id = default(int);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.categories")]
    public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<course> _courses;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public category()
        {
            this._courses = new EntitySet<course>(new Action<course>(this.attach_courses), new Action<course>(this.detach_courses));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "category_course", Storage = "_courses", ThisKey = "id", OtherKey = "category_id")]
        public EntitySet<course> courses
        {
            get
            {
                return this._courses;
            }
            set
            {
                this._courses.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_courses(course entity)
        {
            this.SendPropertyChanging();
            entity.category = this;
        }

        private void detach_courses(course entity)
        {
            this.SendPropertyChanging();
            entity.category = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.comments")]
    public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _content;

        private System.Nullable<int> _lesson_id;

        private System.Nullable<int> _user_id;

        private EntityRef<user> _user;

        private EntityRef<lesson> _lesson;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OncontentChanging(string value);
        partial void OncontentChanged();
        partial void Onlesson_idChanging(System.Nullable<int> value);
        partial void Onlesson_idChanged();
        partial void Onuser_idChanging(System.Nullable<int> value);
        partial void Onuser_idChanged();
        #endregion

        public comment()
        {
            this._user = default(EntityRef<user>);
            this._lesson = default(EntityRef<lesson>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_content", DbType = "NVarChar(MAX)")]
        public string content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OncontentChanging(value);
                    this.SendPropertyChanging();
                    this._content = value;
                    this.SendPropertyChanged("content");
                    this.OncontentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_lesson_id", DbType = "Int")]
        public System.Nullable<int> lesson_id
        {
            get
            {
                return this._lesson_id;
            }
            set
            {
                if ((this._lesson_id != value))
                {
                    if (this._lesson.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onlesson_idChanging(value);
                    this.SendPropertyChanging();
                    this._lesson_id = value;
                    this.SendPropertyChanged("lesson_id");
                    this.Onlesson_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int")]
        public System.Nullable<int> user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_comment", Storage = "_user", ThisKey = "user_id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.comments.Remove(this);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.comments.Add(this);
                        this._user_id = value.id;
                    }
                    else
                    {
                        this._user_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "lesson_comment", Storage = "_lesson", ThisKey = "lesson_id", OtherKey = "id", IsForeignKey = true)]
        public lesson lesson
        {
            get
            {
                return this._lesson.Entity;
            }
            set
            {
                lesson previousValue = this._lesson.Entity;
                if (((previousValue != value)
                            || (this._lesson.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._lesson.Entity = null;
                        previousValue.comments.Remove(this);
                    }
                    this._lesson.Entity = value;
                    if ((value != null))
                    {
                        value.comments.Add(this);
                        this._lesson_id = value.id;
                    }
                    else
                    {
                        this._lesson_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("lesson");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.contact")]
    public partial class contact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private string _email;

        private string _address;

        private string _phone;

        private string _link_facebook;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnemailChanging(string value);
        partial void OnemailChanged();
        partial void OnaddressChanging(string value);
        partial void OnaddressChanged();
        partial void OnphoneChanging(string value);
        partial void OnphoneChanged();
        partial void Onlink_facebookChanging(string value);
        partial void Onlink_facebookChanged();
        #endregion

        public contact()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_email", DbType = "VarChar(50)")]
        public string email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnemailChanging(value);
                    this.SendPropertyChanging();
                    this._email = value;
                    this.SendPropertyChanged("email");
                    this.OnemailChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_address", DbType = "NVarChar(50)")]
        public string address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnaddressChanging(value);
                    this.SendPropertyChanging();
                    this._address = value;
                    this.SendPropertyChanged("address");
                    this.OnaddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_phone", DbType = "VarChar(13)")]
        public string phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnphoneChanging(value);
                    this.SendPropertyChanging();
                    this._phone = value;
                    this.SendPropertyChanged("phone");
                    this.OnphoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_link_facebook", DbType = "VarChar(MAX)")]
        public string link_facebook
        {
            get
            {
                return this._link_facebook;
            }
            set
            {
                if ((this._link_facebook != value))
                {
                    this.Onlink_facebookChanging(value);
                    this.SendPropertyChanging();
                    this._link_facebook = value;
                    this.SendPropertyChanged("link_facebook");
                    this.Onlink_facebookChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.courses")]
    public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _title;

        private string _description;

        private string _image;

        private System.Nullable<long> _price;

        private string _author;

        private System.Nullable<int> _category_id;

        private EntitySet<detail_course> _detail_courses;

        private EntitySet<detail_order> _detail_orders;

        private EntityRef<category> _category;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntitleChanging(string value);
        partial void OntitleChanged();
        partial void OndescriptionChanging(string value);
        partial void OndescriptionChanged();
        partial void OnimageChanging(string value);
        partial void OnimageChanged();
        partial void OnpriceChanging(System.Nullable<long> value);
        partial void OnpriceChanged();
        partial void OnauthorChanging(string value);
        partial void OnauthorChanged();
        partial void Oncategory_idChanging(System.Nullable<int> value);
        partial void Oncategory_idChanged();
        #endregion

        public course()
        {
            this._detail_courses = new EntitySet<detail_course>(new Action<detail_course>(this.attach_detail_courses), new Action<detail_course>(this.detach_detail_courses));
            this._detail_orders = new EntitySet<detail_order>(new Action<detail_order>(this.attach_detail_orders), new Action<detail_order>(this.detach_detail_orders));
            this._category = default(EntityRef<category>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_title", DbType = "NVarChar(200)")]
        public string title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OntitleChanging(value);
                    this.SendPropertyChanging();
                    this._title = value;
                    this.SendPropertyChanged("title");
                    this.OntitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_description", DbType = "NVarChar(MAX)")]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OndescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._description = value;
                    this.SendPropertyChanged("description");
                    this.OndescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_image", DbType = "NVarChar(MAX)")]
        public string image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    this.OnimageChanging(value);
                    this.SendPropertyChanging();
                    this._image = value;
                    this.SendPropertyChanged("image");
                    this.OnimageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_price", DbType = "BigInt")]
        public System.Nullable<long> price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnpriceChanging(value);
                    this.SendPropertyChanging();
                    this._price = value;
                    this.SendPropertyChanged("price");
                    this.OnpriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_author", DbType = "NVarChar(200)")]
        public string author
        {
            get
            {
                return this._author;
            }
            set
            {
                if ((this._author != value))
                {
                    this.OnauthorChanging(value);
                    this.SendPropertyChanging();
                    this._author = value;
                    this.SendPropertyChanged("author");
                    this.OnauthorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_category_id", DbType = "Int")]
        public System.Nullable<int> category_id
        {
            get
            {
                return this._category_id;
            }
            set
            {
                if ((this._category_id != value))
                {
                    if (this._category.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Oncategory_idChanging(value);
                    this.SendPropertyChanging();
                    this._category_id = value;
                    this.SendPropertyChanged("category_id");
                    this.Oncategory_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "course_detail_course", Storage = "_detail_courses", ThisKey = "id", OtherKey = "course_id")]
        public EntitySet<detail_course> detail_courses
        {
            get
            {
                return this._detail_courses;
            }
            set
            {
                this._detail_courses.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "course_detail_order", Storage = "_detail_orders", ThisKey = "id", OtherKey = "course_id")]
        public EntitySet<detail_order> detail_orders
        {
            get
            {
                return this._detail_orders;
            }
            set
            {
                this._detail_orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "category_course", Storage = "_category", ThisKey = "category_id", OtherKey = "id", IsForeignKey = true)]
        public category category
        {
            get
            {
                return this._category.Entity;
            }
            set
            {
                category previousValue = this._category.Entity;
                if (((previousValue != value)
                            || (this._category.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._category.Entity = null;
                        previousValue.courses.Remove(this);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.courses.Add(this);
                        this._category_id = value.id;
                    }
                    else
                    {
                        this._category_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("category");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_detail_courses(detail_course entity)
        {
            this.SendPropertyChanging();
            entity.course = this;
        }

        private void detach_detail_courses(detail_course entity)
        {
            this.SendPropertyChanging();
            entity.course = null;
        }

        private void attach_detail_orders(detail_order entity)
        {
            this.SendPropertyChanging();
            entity.course = this;
        }

        private void detach_detail_orders(detail_order entity)
        {
            this.SendPropertyChanging();
            entity.course = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.detail_course")]
    public partial class detail_course : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<int> _type;

        private System.Nullable<int> _course_id;

        private System.Nullable<int> _user_id;

        private EntityRef<course> _course;

        private EntityRef<user> _user;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntypeChanging(System.Nullable<int> value);
        partial void OntypeChanged();
        partial void Oncourse_idChanging(System.Nullable<int> value);
        partial void Oncourse_idChanged();
        partial void Onuser_idChanging(System.Nullable<int> value);
        partial void Onuser_idChanged();
        #endregion

        public detail_course()
        {
            this._course = default(EntityRef<course>);
            this._user = default(EntityRef<user>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_type", DbType = "Int")]
        public System.Nullable<int> type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OntypeChanging(value);
                    this.SendPropertyChanging();
                    this._type = value;
                    this.SendPropertyChanged("type");
                    this.OntypeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_course_id", DbType = "Int")]
        public System.Nullable<int> course_id
        {
            get
            {
                return this._course_id;
            }
            set
            {
                if ((this._course_id != value))
                {
                    if (this._course.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Oncourse_idChanging(value);
                    this.SendPropertyChanging();
                    this._course_id = value;
                    this.SendPropertyChanged("course_id");
                    this.Oncourse_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int")]
        public System.Nullable<int> user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "course_detail_course", Storage = "_course", ThisKey = "course_id", OtherKey = "id", IsForeignKey = true)]
        public course course
        {
            get
            {
                return this._course.Entity;
            }
            set
            {
                course previousValue = this._course.Entity;
                if (((previousValue != value)
                            || (this._course.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._course.Entity = null;
                        previousValue.detail_courses.Remove(this);
                    }
                    this._course.Entity = value;
                    if ((value != null))
                    {
                        value.detail_courses.Add(this);
                        this._course_id = value.id;
                    }
                    else
                    {
                        this._course_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("course");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_detail_course", Storage = "_user", ThisKey = "user_id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.detail_courses.Remove(this);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.detail_courses.Add(this);
                        this._user_id = value.id;
                    }
                    else
                    {
                        this._user_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.detail_order")]
    public partial class detail_order : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<long> _price;

        private System.Nullable<int> _order_id;

        private System.Nullable<int> _course_id;

        private EntityRef<course> _course;

        private EntityRef<order> _order;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnpriceChanging(System.Nullable<long> value);
        partial void OnpriceChanged();
        partial void Onorder_idChanging(System.Nullable<int> value);
        partial void Onorder_idChanged();
        partial void Oncourse_idChanging(System.Nullable<int> value);
        partial void Oncourse_idChanged();
        #endregion

        public detail_order()
        {
            this._course = default(EntityRef<course>);
            this._order = default(EntityRef<order>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_price", DbType = "BigInt")]
        public System.Nullable<long> price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnpriceChanging(value);
                    this.SendPropertyChanging();
                    this._price = value;
                    this.SendPropertyChanged("price");
                    this.OnpriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_order_id", DbType = "Int")]
        public System.Nullable<int> order_id
        {
            get
            {
                return this._order_id;
            }
            set
            {
                if ((this._order_id != value))
                {
                    if (this._order.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onorder_idChanging(value);
                    this.SendPropertyChanging();
                    this._order_id = value;
                    this.SendPropertyChanged("order_id");
                    this.Onorder_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_course_id", DbType = "Int")]
        public System.Nullable<int> course_id
        {
            get
            {
                return this._course_id;
            }
            set
            {
                if ((this._course_id != value))
                {
                    if (this._course.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Oncourse_idChanging(value);
                    this.SendPropertyChanging();
                    this._course_id = value;
                    this.SendPropertyChanged("course_id");
                    this.Oncourse_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "course_detail_order", Storage = "_course", ThisKey = "course_id", OtherKey = "id", IsForeignKey = true)]
        public course course
        {
            get
            {
                return this._course.Entity;
            }
            set
            {
                course previousValue = this._course.Entity;
                if (((previousValue != value)
                            || (this._course.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._course.Entity = null;
                        previousValue.detail_orders.Remove(this);
                    }
                    this._course.Entity = value;
                    if ((value != null))
                    {
                        value.detail_orders.Add(this);
                        this._course_id = value.id;
                    }
                    else
                    {
                        this._course_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("course");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "order_detail_order", Storage = "_order", ThisKey = "order_id", OtherKey = "id", IsForeignKey = true)]
        public order order
        {
            get
            {
                return this._order.Entity;
            }
            set
            {
                order previousValue = this._order.Entity;
                if (((previousValue != value)
                            || (this._order.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._order.Entity = null;
                        previousValue.detail_orders.Remove(this);
                    }
                    this._order.Entity = value;
                    if ((value != null))
                    {
                        value.detail_orders.Add(this);
                        this._order_id = value.id;
                    }
                    else
                    {
                        this._order_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("order");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.exercises")]
    public partial class exercise : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _title;

        private string _content;

        private string _source_excercise;

        private System.Nullable<int> _lesson_id;

        private EntityRef<lesson> _lesson;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntitleChanging(string value);
        partial void OntitleChanged();
        partial void OncontentChanging(string value);
        partial void OncontentChanged();
        partial void Onsource_excerciseChanging(string value);
        partial void Onsource_excerciseChanged();
        partial void Onlesson_idChanging(System.Nullable<int> value);
        partial void Onlesson_idChanged();
        #endregion

        public exercise()
        {
            this._lesson = default(EntityRef<lesson>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_title", DbType = "NVarChar(200)")]
        public string title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OntitleChanging(value);
                    this.SendPropertyChanging();
                    this._title = value;
                    this.SendPropertyChanged("title");
                    this.OntitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_content", DbType = "NVarChar(MAX)")]
        public string content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OncontentChanging(value);
                    this.SendPropertyChanging();
                    this._content = value;
                    this.SendPropertyChanged("content");
                    this.OncontentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_source_excercise", DbType = "NVarChar(MAX)")]
        public string source_excercise
        {
            get
            {
                return this._source_excercise;
            }
            set
            {
                if ((this._source_excercise != value))
                {
                    this.Onsource_excerciseChanging(value);
                    this.SendPropertyChanging();
                    this._source_excercise = value;
                    this.SendPropertyChanged("source_excercise");
                    this.Onsource_excerciseChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_lesson_id", DbType = "Int")]
        public System.Nullable<int> lesson_id
        {
            get
            {
                return this._lesson_id;
            }
            set
            {
                if ((this._lesson_id != value))
                {
                    if (this._lesson.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onlesson_idChanging(value);
                    this.SendPropertyChanging();
                    this._lesson_id = value;
                    this.SendPropertyChanged("lesson_id");
                    this.Onlesson_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "lesson_exercise", Storage = "_lesson", ThisKey = "lesson_id", OtherKey = "id", IsForeignKey = true)]
        public lesson lesson
        {
            get
            {
                return this._lesson.Entity;
            }
            set
            {
                lesson previousValue = this._lesson.Entity;
                if (((previousValue != value)
                            || (this._lesson.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._lesson.Entity = null;
                        previousValue.exercises.Remove(this);
                    }
                    this._lesson.Entity = value;
                    if ((value != null))
                    {
                        value.exercises.Add(this);
                        this._lesson_id = value.id;
                    }
                    else
                    {
                        this._lesson_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("lesson");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.lessons")]
    public partial class lesson : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _title;

        private string _link_embedded;

        private string _description;

        private System.Nullable<int> _views;

        private string _image;

        private System.Nullable<int> _course_id;

        private EntitySet<comment> _comments;

        private EntitySet<exercise> _exercises;

        private EntitySet<note> _notes;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntitleChanging(string value);
        partial void OntitleChanged();
        partial void Onlink_embeddedChanging(string value);
        partial void Onlink_embeddedChanged();
        partial void OndescriptionChanging(string value);
        partial void OndescriptionChanged();
        partial void OnviewsChanging(System.Nullable<int> value);
        partial void OnviewsChanged();
        partial void OnimageChanging(string value);
        partial void OnimageChanged();
        partial void Oncourse_idChanging(System.Nullable<int> value);
        partial void Oncourse_idChanged();
        #endregion

        public lesson()
        {
            this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
            this._exercises = new EntitySet<exercise>(new Action<exercise>(this.attach_exercises), new Action<exercise>(this.detach_exercises));
            this._notes = new EntitySet<note>(new Action<note>(this.attach_notes), new Action<note>(this.detach_notes));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_title", DbType = "NVarChar(200)")]
        public string title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OntitleChanging(value);
                    this.SendPropertyChanging();
                    this._title = value;
                    this.SendPropertyChanged("title");
                    this.OntitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_link_embedded", DbType = "NVarChar(MAX)")]
        public string link_embedded
        {
            get
            {
                return this._link_embedded;
            }
            set
            {
                if ((this._link_embedded != value))
                {
                    this.Onlink_embeddedChanging(value);
                    this.SendPropertyChanging();
                    this._link_embedded = value;
                    this.SendPropertyChanged("link_embedded");
                    this.Onlink_embeddedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_description", DbType = "NVarChar(MAX)")]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OndescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._description = value;
                    this.SendPropertyChanged("description");
                    this.OndescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_views", DbType = "Int")]
        public System.Nullable<int> views
        {
            get
            {
                return this._views;
            }
            set
            {
                if ((this._views != value))
                {
                    this.OnviewsChanging(value);
                    this.SendPropertyChanging();
                    this._views = value;
                    this.SendPropertyChanged("views");
                    this.OnviewsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_image", DbType = "NVarChar(MAX)")]
        public string image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    this.OnimageChanging(value);
                    this.SendPropertyChanging();
                    this._image = value;
                    this.SendPropertyChanged("image");
                    this.OnimageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_course_id", DbType = "Int")]
        public System.Nullable<int> course_id
        {
            get
            {
                return this._course_id;
            }
            set
            {
                if ((this._course_id != value))
                {
                    this.Oncourse_idChanging(value);
                    this.SendPropertyChanging();
                    this._course_id = value;
                    this.SendPropertyChanged("course_id");
                    this.Oncourse_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "lesson_comment", Storage = "_comments", ThisKey = "id", OtherKey = "lesson_id")]
        public EntitySet<comment> comments
        {
            get
            {
                return this._comments;
            }
            set
            {
                this._comments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "lesson_exercise", Storage = "_exercises", ThisKey = "id", OtherKey = "lesson_id")]
        public EntitySet<exercise> exercises
        {
            get
            {
                return this._exercises;
            }
            set
            {
                this._exercises.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "lesson_note", Storage = "_notes", ThisKey = "id", OtherKey = "lesson_id")]
        public EntitySet<note> notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                this._notes.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_comments(comment entity)
        {
            this.SendPropertyChanging();
            entity.lesson = this;
        }

        private void detach_comments(comment entity)
        {
            this.SendPropertyChanging();
            entity.lesson = null;
        }

        private void attach_exercises(exercise entity)
        {
            this.SendPropertyChanging();
            entity.lesson = this;
        }

        private void detach_exercises(exercise entity)
        {
            this.SendPropertyChanging();
            entity.lesson = null;
        }

        private void attach_notes(note entity)
        {
            this.SendPropertyChanging();
            entity.lesson = this;
        }

        private void detach_notes(note entity)
        {
            this.SendPropertyChanging();
            entity.lesson = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.notes")]
    public partial class note : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _content;

        private System.Nullable<int> _lesson_id;

        private System.Nullable<int> _user_id;

        private EntityRef<lesson> _lesson;

        private EntityRef<user> _user;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OncontentChanging(string value);
        partial void OncontentChanged();
        partial void Onlesson_idChanging(System.Nullable<int> value);
        partial void Onlesson_idChanged();
        partial void Onuser_idChanging(System.Nullable<int> value);
        partial void Onuser_idChanged();
        #endregion

        public note()
        {
            this._lesson = default(EntityRef<lesson>);
            this._user = default(EntityRef<user>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_content", DbType = "NVarChar(MAX)")]
        public string content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OncontentChanging(value);
                    this.SendPropertyChanging();
                    this._content = value;
                    this.SendPropertyChanged("content");
                    this.OncontentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_lesson_id", DbType = "Int")]
        public System.Nullable<int> lesson_id
        {
            get
            {
                return this._lesson_id;
            }
            set
            {
                if ((this._lesson_id != value))
                {
                    if (this._lesson.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onlesson_idChanging(value);
                    this.SendPropertyChanging();
                    this._lesson_id = value;
                    this.SendPropertyChanged("lesson_id");
                    this.Onlesson_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int")]
        public System.Nullable<int> user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "lesson_note", Storage = "_lesson", ThisKey = "lesson_id", OtherKey = "id", IsForeignKey = true)]
        public lesson lesson
        {
            get
            {
                return this._lesson.Entity;
            }
            set
            {
                lesson previousValue = this._lesson.Entity;
                if (((previousValue != value)
                            || (this._lesson.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._lesson.Entity = null;
                        previousValue.notes.Remove(this);
                    }
                    this._lesson.Entity = value;
                    if ((value != null))
                    {
                        value.notes.Add(this);
                        this._lesson_id = value.id;
                    }
                    else
                    {
                        this._lesson_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("lesson");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_note", Storage = "_user", ThisKey = "id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.note = null;
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.note = this;
                        this._id = value.id;
                    }
                    else
                    {
                        this._id = default(int);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.notifications")]
    public partial class notification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _title;

        private string _content;

        private System.Nullable<System.DateTime> _date_time;

        private System.Nullable<int> _user_id;

        private EntityRef<user> _user;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntitleChanging(string value);
        partial void OntitleChanged();
        partial void OncontentChanging(string value);
        partial void OncontentChanged();
        partial void Ondate_timeChanging(System.Nullable<System.DateTime> value);
        partial void Ondate_timeChanged();
        partial void Onuser_idChanging(System.Nullable<int> value);
        partial void Onuser_idChanged();
        #endregion

        public notification()
        {
            this._user = default(EntityRef<user>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_title", DbType = "NVarChar(50)")]
        public string title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OntitleChanging(value);
                    this.SendPropertyChanging();
                    this._title = value;
                    this.SendPropertyChanged("title");
                    this.OntitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_content", DbType = "NVarChar(MAX)")]
        public string content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OncontentChanging(value);
                    this.SendPropertyChanging();
                    this._content = value;
                    this.SendPropertyChanged("content");
                    this.OncontentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_date_time", DbType = "DateTime")]
        public System.Nullable<System.DateTime> date_time
        {
            get
            {
                return this._date_time;
            }
            set
            {
                if ((this._date_time != value))
                {
                    this.Ondate_timeChanging(value);
                    this.SendPropertyChanging();
                    this._date_time = value;
                    this.SendPropertyChanged("date_time");
                    this.Ondate_timeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int")]
        public System.Nullable<int> user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_notification", Storage = "_user", ThisKey = "user_id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.notifications.Remove(this);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.notifications.Add(this);
                        this._user_id = value.id;
                    }
                    else
                    {
                        this._user_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.options")]
    public partial class option : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private string _value;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnvalueChanging(string value);
        partial void OnvalueChanged();
        #endregion

        public option()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_value", DbType = "NChar(50)")]
        public string value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnvalueChanging(value);
                    this.SendPropertyChanging();
                    this._value = value;
                    this.SendPropertyChanged("value");
                    this.OnvalueChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.orders")]
    public partial class order : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<int> _status;

        private System.Nullable<long> _total;

        private string _type_payment;

        private string _code_order;

        private System.Nullable<int> _user_id;

        private System.Nullable<int> _promotion_id;

        private EntitySet<detail_order> _detail_orders;

        private EntityRef<user> _user;

        private EntityRef<promotion> _promotion;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnstatusChanging(System.Nullable<int> value);
        partial void OnstatusChanged();
        partial void OntotalChanging(System.Nullable<long> value);
        partial void OntotalChanged();
        partial void Ontype_paymentChanging(string value);
        partial void Ontype_paymentChanged();
        partial void Oncode_orderChanging(string value);
        partial void Oncode_orderChanged();
        partial void Onuser_idChanging(System.Nullable<int> value);
        partial void Onuser_idChanged();
        partial void Onpromotion_idChanging(System.Nullable<int> value);
        partial void Onpromotion_idChanged();
        #endregion

        public order()
        {
            this._detail_orders = new EntitySet<detail_order>(new Action<detail_order>(this.attach_detail_orders), new Action<detail_order>(this.detach_detail_orders));
            this._user = default(EntityRef<user>);
            this._promotion = default(EntityRef<promotion>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_status", DbType = "Int")]
        public System.Nullable<int> status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnstatusChanging(value);
                    this.SendPropertyChanging();
                    this._status = value;
                    this.SendPropertyChanged("status");
                    this.OnstatusChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_total", DbType = "BigInt")]
        public System.Nullable<long> total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OntotalChanging(value);
                    this.SendPropertyChanging();
                    this._total = value;
                    this.SendPropertyChanged("total");
                    this.OntotalChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_type_payment", DbType = "NVarChar(100)")]
        public string type_payment
        {
            get
            {
                return this._type_payment;
            }
            set
            {
                if ((this._type_payment != value))
                {
                    this.Ontype_paymentChanging(value);
                    this.SendPropertyChanging();
                    this._type_payment = value;
                    this.SendPropertyChanged("type_payment");
                    this.Ontype_paymentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_code_order", DbType = "NVarChar(20)")]
        public string code_order
        {
            get
            {
                return this._code_order;
            }
            set
            {
                if ((this._code_order != value))
                {
                    this.Oncode_orderChanging(value);
                    this.SendPropertyChanging();
                    this._code_order = value;
                    this.SendPropertyChanged("code_order");
                    this.Oncode_orderChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int")]
        public System.Nullable<int> user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_promotion_id", DbType = "Int")]
        public System.Nullable<int> promotion_id
        {
            get
            {
                return this._promotion_id;
            }
            set
            {
                if ((this._promotion_id != value))
                {
                    if (this._promotion.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onpromotion_idChanging(value);
                    this.SendPropertyChanging();
                    this._promotion_id = value;
                    this.SendPropertyChanged("promotion_id");
                    this.Onpromotion_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "order_detail_order", Storage = "_detail_orders", ThisKey = "id", OtherKey = "order_id")]
        public EntitySet<detail_order> detail_orders
        {
            get
            {
                return this._detail_orders;
            }
            set
            {
                this._detail_orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_order", Storage = "_user", ThisKey = "user_id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.orders.Remove(this);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.orders.Add(this);
                        this._user_id = value.id;
                    }
                    else
                    {
                        this._user_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "promotion_order", Storage = "_promotion", ThisKey = "promotion_id", OtherKey = "id", IsForeignKey = true)]
        public promotion promotion
        {
            get
            {
                return this._promotion.Entity;
            }
            set
            {
                promotion previousValue = this._promotion.Entity;
                if (((previousValue != value)
                            || (this._promotion.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._promotion.Entity = null;
                        previousValue.orders.Remove(this);
                    }
                    this._promotion.Entity = value;
                    if ((value != null))
                    {
                        value.orders.Add(this);
                        this._promotion_id = value.id;
                    }
                    else
                    {
                        this._promotion_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("promotion");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_detail_orders(detail_order entity)
        {
            this.SendPropertyChanging();
            entity.order = this;
        }

        private void detach_detail_orders(detail_order entity)
        {
            this.SendPropertyChanging();
            entity.order = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.promotions")]
    public partial class promotion : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private string _code_promotion;

        private System.Nullable<int> _percent;

        private System.Nullable<bool> _active;

        private System.Nullable<System.DateTime> _out_of_date;

        private System.Nullable<int> _user_id;

        private EntitySet<order> _orders;

        private EntityRef<user> _user;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void Oncode_promotionChanging(string value);
        partial void Oncode_promotionChanged();
        partial void OnpercentChanging(System.Nullable<int> value);
        partial void OnpercentChanged();
        partial void OnactiveChanging(System.Nullable<bool> value);
        partial void OnactiveChanged();
        partial void Onout_of_dateChanging(System.Nullable<System.DateTime> value);
        partial void Onout_of_dateChanged();
        partial void Onuser_idChanging(System.Nullable<int> value);
        partial void Onuser_idChanged();
        #endregion

        public promotion()
        {
            this._orders = new EntitySet<order>(new Action<order>(this.attach_orders), new Action<order>(this.detach_orders));
            this._user = default(EntityRef<user>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(200)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_code_promotion", DbType = "VarChar(20)")]
        public string code_promotion
        {
            get
            {
                return this._code_promotion;
            }
            set
            {
                if ((this._code_promotion != value))
                {
                    this.Oncode_promotionChanging(value);
                    this.SendPropertyChanging();
                    this._code_promotion = value;
                    this.SendPropertyChanged("code_promotion");
                    this.Oncode_promotionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "[percent]", Storage = "_percent", DbType = "Int")]
        public System.Nullable<int> percent
        {
            get
            {
                return this._percent;
            }
            set
            {
                if ((this._percent != value))
                {
                    this.OnpercentChanging(value);
                    this.SendPropertyChanging();
                    this._percent = value;
                    this.SendPropertyChanged("percent");
                    this.OnpercentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_active", DbType = "Bit")]
        public System.Nullable<bool> active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnactiveChanging(value);
                    this.SendPropertyChanging();
                    this._active = value;
                    this.SendPropertyChanged("active");
                    this.OnactiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_out_of_date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> out_of_date
        {
            get
            {
                return this._out_of_date;
            }
            set
            {
                if ((this._out_of_date != value))
                {
                    this.Onout_of_dateChanging(value);
                    this.SendPropertyChanging();
                    this._out_of_date = value;
                    this.SendPropertyChanged("out_of_date");
                    this.Onout_of_dateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_user_id", DbType = "Int")]
        public System.Nullable<int> user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    if (this._user.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.Onuser_idChanging(value);
                    this.SendPropertyChanging();
                    this._user_id = value;
                    this.SendPropertyChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "promotion_order", Storage = "_orders", ThisKey = "id", OtherKey = "promotion_id")]
        public EntitySet<order> orders
        {
            get
            {
                return this._orders;
            }
            set
            {
                this._orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "user_promotion", Storage = "_user", ThisKey = "user_id", OtherKey = "id", IsForeignKey = true)]
        public user user
        {
            get
            {
                return this._user.Entity;
            }
            set
            {
                user previousValue = this._user.Entity;
                if (((previousValue != value)
                            || (this._user.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._user.Entity = null;
                        previousValue.promotions.Remove(this);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.promotions.Add(this);
                        this._user_id = value.id;
                    }
                    else
                    {
                        this._user_id = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("user");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_orders(order entity)
        {
            this.SendPropertyChanging();
            entity.promotion = this;
        }

        private void detach_orders(order entity)
        {
            this.SendPropertyChanging();
            entity.promotion = null;
        }
    }
}
#pragma warning restore 1591
